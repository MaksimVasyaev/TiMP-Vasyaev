Модуль, отвечающий за реализацию сдвигового шифра:

#include "cesar.h"
#include <iostream> 
#include <string> 
#include <cctype> 
using namespace std;

Cesar::Cesar(const unsigned int _key) :key(_key)
{
	if (key >= alph || key == 0)
	{
		throw 1;
	}

}

string Cesar::Preparation_For_Encript(string m)
{
	string M;
	for (auto c : m)
	{
		if ((c >= 'А') && (c <= 'я') | (c <= 'Ё') | (c <= 'ё'))
		{
			throw 2;
		}
		else
			if (islower(c))
			{
				M += toupper(c);
			}
			else if (isupper(c))
			{
				M += c;
			}

			else if (isspace(c) || ispunct(c))
			{
				continue;
			}

			else
			{
				throw 2;

			}

	}
	return M;
}

string Cesar::Shift_For_Encript(string m)
{
	M = Preparation_For_Encript(m);
	string res;
	int a = alph;
	int i = 0;
	for (auto c : M)
	{
		if (c + key <= 'Z')
		{
			res += c + key;
		}
		else
		{
			res += c - (a - key);
		}
		i++;
	}
	return string(res);
}

string Cesar::Before_Decription(string m)
{
	string M;
	for (auto c : m)
	{
		if (isupper(c))
		{
			M += c;
		}
		else
		{
			throw 3;
		}

	}
	return M;
}

string Cesar::Shift_For_Decript(string m)
{
	M = Before_Decription(m);
	string res;
	int a = alph;
	int i = 0;
	for (auto c : M)
	{
		if (c - key >= 'A')
		{
			res += c - key;
		}
		else
		{
			res += c + (a - key);
		}
		i++;
	}
	return string(res);
}

Заголовочный модуль:

#pragma once
#include <string> 
using namespace std;
class Cesar
{
private:
	string m, M, res, output;
	int key;
	int alph = 26;
	string Preparation_For_Encript(string m);
	string Before_Decription(string m);
public:
	string Shift_For_Encript(string m);
	string Shift_For_Decript(string m);
	Cesar(const unsigned int _key);
};

Главный модуль:

#include "cesar.h"
#include <iostream> 
#include <string> 
#include <cctype> 
#include <cppunit/TestCaller.h>
#include <cppunit/ui/text/TextTestRunner.h>
using namespace std;
class Test :public CppUnit::TestCase
{
private:
	string i1 = "abc";
	string i2 = "ABC";
	string i3 = "A.b c/K!";
	string i4 = "";
	string i5 = "srщ";
	string i6 = "sr 2";
	string i7 = "ABc";
public:
	void TestEncription()
	{
		Cesar x(25);
		CPPUNIT_ASSERT_EQUAL( string("ZABJ"), x.Shift_For_Encript(i3));
		CPPUNIT_ASSERT_EQUAL(string(""), x.Shift_For_Encript(i4));
		Cesar y(1);
		CPPUNIT_ASSERT_EQUAL(string("BCDL"), y.Shift_For_Encript(i3));
		CPPUNIT_ASSERT_EQUAL(string(""), y.Shift_For_Encript(i4));
	}
	void TestEncriptionExceptions()
	{
		Cesar x(1);
		CPPUNIT_ASSERT_THROW(x.Shift_For_Encript(i5), int);
		CPPUNIT_ASSERT_THROW(x.Shift_For_Encript(i6), int);
		Cesar y(25);
		CPPUNIT_ASSERT_THROW(y.Shift_For_Encript(i5), int);
		CPPUNIT_ASSERT_THROW(y.Shift_For_Encript(i6), int);
	}
	void TestDecription()
	{
		Cesar x(25);
		CPPUNIT_ASSERT_EQUAL(string("BCD"), x.Shift_For_Decript(i2));
		CPPUNIT_ASSERT_EQUAL(string(""), x.Shift_For_Decript(i4));
		Cesar y(1);
		CPPUNIT_ASSERT_EQUAL(string("ZAB"), y.Shift_For_Decript(i2));
		CPPUNIT_ASSERT_EQUAL(string(""), y.Shift_For_Decript(i4));
	}
	void TestDecriptionException()
	{
		Cesar x(1);
		CPPUNIT_ASSERT_THROW(x.Shift_For_Decript(i7), int);
		Cesar y(25);
		CPPUNIT_ASSERT_THROW(y.Shift_For_Decript(i7), int);
	}
	void TestKeyException()
	{
		CPPUNIT_ASSERT_THROW(Cesar(0), int);
		CPPUNIT_ASSERT_THROW(Cesar(26), int);
		CPPUNIT_ASSERT_THROW(Cesar(-5), int);
		CPPUNIT_ASSERT_THROW(Cesar(32), int);
	}
};

int main()
{
	CppUnit::TestSuite* suite = new CppUnit::TestSuite("Test");
	suite->addTest(new CppUnit::TestCaller<Test>
		("TestEncription", &Test::TestEncription));
		suite->addTest(new CppUnit::TestCaller<Test>
			("TestEncriptionExceptions", &Test::TestEncriptionExceptions));
		suite->addTest(new CppUnit::TestCaller<Test>
			("TestDecription", &Test::TestDecription));
		suite->addTest(new CppUnit::TestCaller<Test>
		("TestDecriptionException", &Test::TestDecriptionException));
		suite->addTest(new CppUnit::TestCaller<Test>
		("TestKeyException", &Test::TestKeyException));
	CppUnit::TextTestRunner runner;
	runner.addTest(suite);
	runner.run();
	return 0;
}